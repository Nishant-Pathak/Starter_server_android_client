apply plugin: "com.android.application"
apply plugin: "com.neenbedankt.android-apt"
apply plugin: "me.tatarka.retrolambda"
apply plugin: "com.squareup.sqldelight"
apply plugin: "io.fabric"
apply plugin: "com.google.protobuf"

repositories {
  maven { url "https://maven.fabric.io/public" }
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    applicationId "com.nishant.starterkit"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    debug {
      minifyEnabled true
      useProguard false
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      testProguardFiles getDefaultProguardFile("proguard-android.txt"), "proguardTest-rules.pro"

      buildConfigField "String", "API_HOST", '"http://103.6.157.14"'
      buildConfigField "Integer", "API_PORT", "8080"
    }
    release {
      minifyEnabled true
      useProguard true
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      testProguardFiles getDefaultProguardFile("proguard-android.txt"), "proguardTest-rules.pro"

      buildConfigField "String", "API_HOST", '"http://103.6.157.14"'
      buildConfigField "Integer", "API_PORT", "8080"
    }
  }


  // If you need to add more flavors, consider using flavor dimensions.
  productFlavors {
    mock {
      applicationIdSuffix = ".mock"
    }
    prod {

    }
  }

  // Remove mockRelease as it"s not needed.
  android.variantFilter { variant ->
    if(variant.buildType.name.equals("release")
      && variant.getFlavors().get(0).name.equals("mock")) {
      variant.setIgnore(true);
    }
  }

  // Always show the result of every unit test, even if it passes.
  testOptions.unitTests.all {
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
    }
  }

  lintOptions {
    disable "InvalidPackage", "HardcodedText"
    textReport true
    textOutput "stdout"
  }

  configurations.all {
    resolutionStrategy.force "com.google.code.findbugs:jsr305:2.0.1"
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:$rootProject.protobufVersion"
  }
  plugins {
    javalite {
      artifact = "com.google.protobuf:protoc-gen-javalite:$rootProject.protobufVersion"
    }
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:$rootProject.grpcJavaVersion" // CURRENT_GRPC_VERSION
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.plugins {
        javalite {}
        grpc {
          // Options added to --grpc_out
          option "lite"
        }
      }
    }
  }

  configurations.all {
    resolutionStrategy.force "com.google.code.findbugs:jsr305:2.0.1"
  }
}

dependencies {
  compile fileTree(dir: "libs", include: ["*.jar"])
  compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
  compile "com.android.support:design:$rootProject.supportLibraryVersion"
  compile "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
  compile "com.google.dagger:dagger:$rootProject.daggerVersion"
  compile "com.jakewharton.timber:timber:$rootProject.timberVersion"

  compile "io.reactivex:rxandroid:$rootProject.rxAndroidVersion"
  compile "io.reactivex:rxjava:$rootProject.rxJavaVersion"

  compile("com.crashlytics.sdk.android:crashlytics:$rootProject.crashlyticsVersion@aar") {
    transitive = true;
  }

  compile "com.jakewharton.rxbinding:rxbinding:$rootProject.rxbindingVersion"

  compile "com.trello:rxlifecycle-components:$rootProject.rxlifecycleComponentsVersion"
  compile "com.trello:rxlifecycle-android:$rootProject.rxlifecycleAndroidVersion"
  compile "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
  compile "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
  compile "com.squareup.retrofit2:adapter-rxjava:$rootProject.retrofitVersion"
  compile "com.squareup.okhttp3:logging-interceptor:$rootProject.loggingInterceptorVersion"


  provided "com.google.auto.value:auto-value:$rootProject.autoValueVersion"
  apt "com.google.auto.value:auto-value:$rootProject.autoValueVersion"
  compile "com.squareup.sqlbrite:sqlbrite:$rootProject.sqlbriteVersion"


  apt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
  apt "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"

  androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion", {
    exclude group: "com.android.support", module: "support-annotations"
  })
  androidTestCompile 'com.android.support:support-annotations:25.0.0'
  androidTestCompile 'com.android.support.test:runner:0.5'
  androidTestCompile 'com.android.support.test:rules:0.5'
  // Optional -- Hamcrest library
  androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
  // Optional -- UI testing with Espresso
  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
  // Optional -- UI testing with UI Automator
  androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

  testCompile "junit:junit:$rootProject.junitVersion"
  testCompile "org.mockito:mockito-all:$rootProject.mockitoVersion"

  compile "com.google.guava:guava:$rootProject.guavaVersion"
  compile "com.squareup.okhttp:okhttp:$rootProject.okhttpVersion"
  compile "io.grpc:grpc-okhttp:$rootProject.grpcOkhttpVersion"
  compile "io.grpc:grpc-protobuf-lite:$rootProject.grpcProtobufLiteVersion"
  compile "io.grpc:grpc-stub:$rootProject.grpcStubVersion"
  compile "javax.annotation:javax.annotation-api:$rootProject.annotationApiVersion"

  compile 'com.android.support:recyclerview-v7:25.0.0'
  compile 'com.facebook.stetho:stetho:1.4.1'


}
